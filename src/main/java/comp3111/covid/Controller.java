package comp3111.covid;

import java.awt.FileDialog;
import java.awt.image.BufferedImage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javax.imageio.ImageIO;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.chart.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.CheckBoxListCell;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.image.WritableImage;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;
import javafx.scene.SnapshotParameters;
import javax.swing.*;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;
import javafx.util.StringConverter;
import java.util.stream.Collectors;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller {

	private TaskA1 taskA1 = new TaskA1();
	
	private TaskA2 taskA2 = new TaskA2();
		
	@FXML
	private B1TabController b1TabController;
	
	@FXML
	private B2TabController b2TabController;
	
	@FXML
	private DatePicker tableCDatePicker;

	@FXML
	private ScrollPane tableCCountryPane;

	@FXML
	private ScrollPane tableCPane;

	@FXML
	private DatePicker chartCDatePickerFrom;

	@FXML
	private DatePicker chartCDatePickerTo;

	@FXML
	private ScrollPane chartCCountryPane;

	@FXML
	private ScrollPane chartCPane;
	
	
    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML 
    public TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    public TextArea textAreaConsole;
    
    @FXML
    public ScrollPane scrollPaneBottom;

    @FXML 
    private void initialize() {
    	//TODO: Injection of a1,a2,c1,c2 controller
        b1TabController.injectController(this);
        taskA1.setController(this);
        b2TabController.injectController(this);
        taskA2.setController(this);
    }  
    
    
    
    /**
     * For Task C1, update the country panel
     */
    @FXML
    void updateTableCCountryPanel(ActionEvent event){
    	try{
            String iDataset = textfieldDataset.getText();
            LocalDate iDate = tableCDatePicker.getValue();
            tableCDatePicker.getEditor().setDisable(true);

            Map<String, Country> countryMap = DataAnalysis.getVaccinationDataBeforeDate(iDataset, iDate);

            ObservableList<Task> tasks = FXCollections.observableArrayList(
                    countryMap.keySet().stream().map(Task::new).collect(Collectors.toList())
            );

            tasks.forEach(task -> task.selectedProperty().addListener((observable, wasSelected, isSelected) -> {
                List<String> selected = tasks.stream().filter(Task::isSelected).collect(Collectors.toList()).stream().map(Task::getName).collect(Collectors.toList());
                showVaccinationCountryTable(iDate, countryMap, selected);
            }));

            ListView<Task> countriesList = new ListView<>(tasks);
            countriesList.setCellFactory(CheckBoxListCell.forListView(Task::selectedProperty, new StringConverter<Task>() {
                @Override
                public String toString(Task object) {
                    return object.getName();
                }

                @Override
                public Task fromString(String string) {
                    return null;
                }
            }));
            tableCCountryPane.setContent(countriesList);
        } catch (Exception ex){
            System.out.println(ex);
        }
    }
    
    /**
     * Commendable Feature for both C1 and C2: Save the table/chart as picture into the local computer
     * After generating the table/chart, click on the table/chart, a blue frame surrounded the table/chart will then be shown
     * For MacOS: Press "control"+"s", not "command"+"s"
     * For Windows: Press "ctrl"+"s"
     * Save to your desired directory
     */
    private File saveFile() { 
        String osName = System.getProperty("os.name");
        System.out.println(osName);
        String homeDir = System.getProperty("user.home");
        File selectedPath = null;
        if (osName.equals("Mac OS X")) {
        	try {
           	 Process process = Runtime.getRuntime().exec(new String[]{
     		        "/usr/bin/osascript", 
     		        "-e", 
     		        "set theNewFilePath to choose file name with prompt \"Save the document as:\"\n"
     		        + "return POSIX path of theNewFilePath"
     		    });
     		    int result = process.waitFor();
     		    if (result == 0) {
     		    	InputStreamReader in = new InputStreamReader(process.getInputStream());
     		        String selectedFolder = new BufferedReader(in).readLine();
     		        return new File(selectedFolder);
     		    }        		
        	} catch(Exception ex) {
        	  }
        } else {
            JFileChooser chooser = new JFileChooser();
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File(homeDir));
            fc.setAcceptAllFileFilterUsed(false);
            fc.showOpenDialog(null);
            selectedPath = fc.getSelectedFile();
        }
        return selectedPath;
    }
    
    /**
     * For Task C1, show the table containing the information about vaccination among selected countries
     */
    void showVaccinationCountryTable(LocalDate iDate, Map<String, Country> countryMap, List<String> iSelected){
        TableView tableView = new TableView();

        TableColumn<Map, String> title   = new TableColumn<>("Rate of Vaccination against COVID-19 as of " + iDate.toString());

        TableColumn<Map, String> column1 = new TableColumn<>("Country");
        column1.setCellValueFactory(new MapValueFactory<>("CountryName"));

        TableColumn<Map, String> column2 = new TableColumn<>("Fully Vaccinated");
        column2.setCellValueFactory(new MapValueFactory<>("VaccinatedNum"));

        // Set Filter Sort By Numbers instead of String
        Comparator<String> vaccinatedColComparator = (String a, String b) -> {
            Long a_l = Long.parseLong(a.replaceAll(",", ""));
            Long b_l = Long.parseLong(b.replaceAll(",", ""));
            return a_l.compareTo(b_l);
        };
        column2.setComparator(vaccinatedColComparator);


        TableColumn<Map, String> column3 = new TableColumn<>("Rate of Vaccination");
        column3.setCellValueFactory(new MapValueFactory<>("Rate"));

        // Set Filter Sort By Numbers instead of String
        Comparator<String> rateColComparator = (String a, String b) -> {
            Float a_l = Float.parseFloat(a.replaceAll("%", ""));
            Float b_l = Float.parseFloat(b.replaceAll("%", ""));
            return a_l.compareTo(b_l);
        };
        column3.setComparator(rateColComparator);


        ObservableList<Map<String, String>> items = FXCollections.observableArrayList();

        title.getColumns().addAll(column1,column2,column3);
        tableView.getColumns().addAll(title);

        for (String selectedCountry: iSelected) {
            Country country = countryMap.getOrDefault(selectedCountry, null);
            if (country != null) {
                items.add(country.getPropertyMap());
            }
        }

        tableView.getItems().addAll(items);

        tableView.setColumnResizePolicy(tableView.CONSTRAINED_RESIZE_POLICY);
        tableCPane.setContent(tableView);
        
        KeyCombination controlS = new KeyCodeCombination(KeyCode.S, KeyCodeCombination.CONTROL_DOWN);
        tableCPane.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                if(controlS.match(event)){
                    WritableImage img = tableView.snapshot(new SnapshotParameters(), null);
                    try {
                        File file = saveFile();
                        if (file == null)
                            return;
                        if (!file.toString().endsWith(".png")) {
                            file = new File(file.toString() + ".png");
                        }
                        ImageIO.write(SwingFXUtils.fromFXImage(img, null), "png", file);
                    } catch (IOException ex) {

                    }
                }
            }
        });
    }

    /**
     * For Task C2, update the country panel
     */
    @FXML
    void updateChartCCountryPanel(ActionEvent event){
        try{
            String iDataset = textfieldDataset.getText();
            LocalDate iFromDate = chartCDatePickerFrom.getValue();
            LocalDate iToDate = chartCDatePickerTo.getValue();
            chartCDatePickerFrom.getEditor().setDisable(true);
            chartCDatePickerTo.getEditor().setDisable(true);
            if(iFromDate == null || iToDate == null || iDataset == null || iToDate.isBefore(iFromDate) || iToDate.equals(iFromDate)){
                textAreaConsole.setText("No valid input for From Date and To Date");
                return;
            }
            textAreaConsole.clear();
            Map<String, List<XYChart.Data<Long, Float>>> countryMap = DataAnalysis.getVaccinationDataBetweenDate(iDataset, iFromDate, iToDate);

            ObservableList<Task> tasks = FXCollections.observableArrayList(
                    countryMap.keySet().stream().map(Task::new).collect(Collectors.toList())
            );

            tasks.forEach(task -> task.selectedProperty().addListener((observable, wasSelected, isSelected) -> {
                List<String> selected = tasks.stream().filter(Task::isSelected).collect(Collectors.toList()).stream().map(Task::getName).collect(Collectors.toList());
                showVaccinationCountryChart(countryMap, selected);
            }));

            ListView<Task> countriesList = new ListView<>(tasks);
            countriesList.setCellFactory(CheckBoxListCell.forListView(Task::selectedProperty, new StringConverter<Task>() {
                @Override
                public String toString(Task object) {
                    return object.getName();
                }

                @Override
                public Task fromString(String string) {
                    return null;
                }
            }));
            chartCCountryPane.setContent(countriesList);

        }catch(Exception ex){
            System.out.println(ex);
        }

    }
    /**
     * For Task C2, show the chart containing the vaccination's information of selected countries
     */
    void showVaccinationCountryChart(Map<String, List<XYChart.Data<Long, Float>>> countryMap, List<String> iSelected){
        NumberAxis xAxis = new NumberAxis();
        xAxis.setLabel("Date");

        Format format = new SimpleDateFormat("yyyy-MM-dd");

        xAxis.setTickLabelFormatter(new StringConverter<Number>() {
            @Override
            public String toString(Number object) {
                return format.format(new Date(object.longValue()));
            }

            @Override
            public Number fromString(String string) {
                return null;
            }
        });

        NumberAxis yAxis = new NumberAxis();
        yAxis.setLabel("Rate");
        yAxis.setTickLabelFormatter(new StringConverter<Number>() {
            @Override
            public String toString(Number object) {
                double value = object.doubleValue();
                if (value >= 1)
                    return String.format("%2.0f%%", object.doubleValue());
                else
                    return String.format("%2.2f%%", object.doubleValue());
            }

            @Override
            public Number fromString(String string) {
                return null;
            }
        });

        LineChart lineChart = new LineChart(xAxis, yAxis);

        var ref = new Object() {
            Long min = Long.MAX_VALUE;
            Long max = Long.MIN_VALUE;
        };

        for (String countryName: iSelected){
            if (countryMap.containsKey(countryName)){
                XYChart.Series dataSeries1 = new XYChart.Series();
                dataSeries1.setName(countryName);
                List<XYChart.Data<Long, Float>> data = countryMap.get(countryName);
                data.forEach(d -> {
                    ref.min = Math.min(ref.min, d.getXValue());
                    ref.max = Math.max(ref.max, d.getXValue());
                });
                dataSeries1.getData().addAll(data);
                lineChart.getData().add(dataSeries1);
            }
        }

        lineChart.setTitle("Cumulative Rate of Vaccination against COVID-19");
        xAxis.setAutoRanging(false);
        xAxis.setTickUnit((ref.max-ref.min)/10);
        xAxis.setLowerBound(ref.min);
        xAxis.setUpperBound(ref.max);
        yAxis.setAutoRanging(true);
        lineChart.setCreateSymbols(false);
        lineChart.autosize();
        lineChart.applyCss();
        chartCPane.setContent(lineChart);
        
        // Save chart as png after clicking the blue border of the chart and press "Ctrl"+"S" or "Control"+"S"
        KeyCombination controlS = new KeyCodeCombination(KeyCode.S, KeyCodeCombination.CONTROL_DOWN);
        chartCPane.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                if(controlS.match(event)){
                    WritableImage img = lineChart.snapshot(new SnapshotParameters(), null);
                    try {
                        File file = saveFile();
                        if (file == null)
                            return;
                        if (!file.toString().endsWith(".png")) {
                            file = new File(file.toString() + ".png");
                        }
                        ImageIO.write(SwingFXUtils.fromFXImage(img, null), "png", file);
                    } catch (IOException ex) {

                    }
                }
            }
        });
        
    }

}

